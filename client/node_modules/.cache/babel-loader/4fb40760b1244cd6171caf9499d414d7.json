{"ast":null,"code":"import _objectSpread from \"/home/kostek/Documents/Programming/angotia-map-creator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/kostek/Documents/Programming/angotia-map-creator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kostek/Documents/Programming/angotia-map-creator/src/components/partials/creatorPanel/vertexWeight/VertexWeightPopup.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'; //Import scripts\n\nimport { deepCopy, matrixToIds } from '../../../../assets/scripts/matrix';\nimport { markSquare } from '../../../../assets/scripts/markSquare'; //Import configs\n\nimport creatorConfig from '../../../../assets/configs/creatorConfig.json'; //Import actions\n\nimport { changeMapVertexWeightMatrix, changeMapVertexWeights } from '../../../../redux/actions/mapActions';\n\nvar VertexWeightPopup = function VertexWeightPopup(_ref) {\n  var closePopup = _ref.closePopup;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      vertexWeightValue = _useState2[0],\n      setVertexWeightValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var selectMatrix = deepCopy(useSelector(function (state) {\n    return state.map.select.matrix;\n  }));\n  var vertexWeightMatrix = useSelector(function (state) {\n    return state.map.vertex.matrix;\n  });\n  var vertexWeights = deepCopy(useSelector(function (state) {\n    return state.map.vertex.weights;\n  }));\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (parseInt(vertexWeightValue) < creatorConfig.vertexWeight.min || parseInt(vertexWeightValue) > creatorConfig.vertexWeight.max || !vertexWeightMatrix || !Number(vertexWeightValue)) {\n      setError(true);\n    } else setError(false);\n  }, [vertexWeightValue]);\n\n  var insertVertexWeight = function insertVertexWeight() {\n    var potentialWeights = matrixToIds(selectMatrix);\n    potentialWeights.forEach(function (location) {\n      if (!vertexWeights.some(function (e) {\n        return e.id === location.id;\n      })) {\n        var newLocation = _objectSpread({}, location, {\n          destination: {\n            vertexWeightValue: vertexWeightValue\n          }\n        });\n\n        vertexWeights.push(newLocation);\n      }\n    });\n    closePopup(false);\n    dispatch(changeMapVertexWeights(vertexWeights));\n    markSquare(vertexWeightMatrix, 'mapVertexWeightCanvas', changeMapVertexWeightMatrix, 'Vertex weight added', vertexWeightValue, 'vertexWeight');\n  };\n\n  return React.createElement(\"div\", {\n    className: \"g-container g-container--popup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    role: \"alert\",\n    className: \"insertPopup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"insertPopup__header t-paragraph3Light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Add weight\"), React.createElement(\"label\", {\n    className: \"insertPopup__label t-paragraph6Light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Weight of vertex (\", creatorConfig.vertexWeight.min, \" - \", creatorConfig.vertexWeight.max, \")\"), React.createElement(\"input\", {\n    type: \"text\",\n    value: vertexWeightValue,\n    onChange: function onChange(e) {\n      return setVertexWeightValue(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), error ? React.createElement(\"span\", {\n    className: \"insertPopup--error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Type proper value (number)\") : null, React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"insertPopup__submit t-paragraphLight\",\n    onClick: function onClick() {\n      return insertVertexWeight();\n    },\n    disabled: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \" submit \")));\n};\n\nexport default VertexWeightPopup;","map":{"version":3,"sources":["/home/kostek/Documents/Programming/angotia-map-creator/src/components/partials/creatorPanel/vertexWeight/VertexWeightPopup.tsx"],"names":["React","useState","useEffect","useSelector","useDispatch","deepCopy","matrixToIds","markSquare","creatorConfig","changeMapVertexWeightMatrix","changeMapVertexWeights","VertexWeightPopup","closePopup","vertexWeightValue","setVertexWeightValue","error","setError","selectMatrix","state","map","select","matrix","vertexWeightMatrix","vertex","vertexWeights","weights","dispatch","parseInt","vertexWeight","min","max","Number","insertVertexWeight","potentialWeights","forEach","location","some","e","id","newLocation","destination","push","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n//Import scripts\nimport { deepCopy, matrixToIds } from '../../../../assets/scripts/matrix';\nimport { markSquare } from '../../../../assets/scripts/markSquare';\n\n//Import configs\nimport creatorConfig from '../../../../assets/configs/creatorConfig.json';\n\n//Import actions\nimport { changeMapVertexWeightMatrix, changeMapVertexWeights } from '../../../../redux/actions/mapActions';\n\n\ninterface IPassageOption {\n    closePopup: Function\n}\n\n\nconst VertexWeightPopup: React.FC<IPassageOption> = ({ closePopup }) => {\n    const [vertexWeightValue, setVertexWeightValue] = useState<string>(\"\");\n    const [error, setError] = useState<boolean>(false);\n    const selectMatrix = deepCopy(useSelector(state => state.map.select.matrix));\n    const vertexWeightMatrix = useSelector(state => state.map.vertex.matrix);\n    const vertexWeights = deepCopy(useSelector(state => state.map.vertex.weights));\n    const dispatch = useDispatch(); \n\n\n    useEffect(() => {\n        if (parseInt(vertexWeightValue) < creatorConfig.vertexWeight.min || parseInt(vertexWeightValue) > creatorConfig.vertexWeight.max || !vertexWeightMatrix || !Number(vertexWeightValue)) {\n            setError(true);\n        }\n        else setError(false);\n\n    }, [vertexWeightValue])\n\n\n    const insertVertexWeight = () => {\n        const potentialWeights = matrixToIds(selectMatrix);\n        potentialWeights.forEach(location => {\n            if (!vertexWeights.some(e => e.id === location.id)) {\n                const newLocation = {\n                    ...location,\n                    destination: {\n                        vertexWeightValue,\n                    }\n                }\n\n                vertexWeights.push(newLocation);\n              }\n        })\n\n        closePopup(false);\n        dispatch(changeMapVertexWeights(vertexWeights));\n        markSquare(vertexWeightMatrix, 'mapVertexWeightCanvas', changeMapVertexWeightMatrix, 'Vertex weight added', vertexWeightValue, 'vertexWeight')\n    }\n\n    return (\n        <div className=\"g-container g-container--popup\">\n            <div role=\"alert\" className=\"insertPopup\"> \n                <header className=\"insertPopup__header t-paragraph3Light\">Add weight</header>\n                <label className=\"insertPopup__label t-paragraph6Light\">\n                    Weight of vertex ({creatorConfig.vertexWeight.min} - {creatorConfig.vertexWeight.max})\n                </label>\n                <input type='text' value={vertexWeightValue} onChange={e => setVertexWeightValue(e.target.value)}/>\n                {\n                    (error) ? (\n                        <span className=\"insertPopup--error\">Type proper value (number)</span>\n                    ) : null\n                }\n\n                <button type=\"submit\" className=\"insertPopup__submit t-paragraphLight\" onClick={() => insertVertexWeight()} disabled={error}> submit </button>\n            </div>\n        </div>\n    )\n}\n\n\nexport default VertexWeightPopup;"]},"metadata":{},"sourceType":"module"}