{"ast":null,"code":"import _slicedToArray from \"/home/kostek/Documents/Programming/angotia-map-creator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kostek/Documents/Programming/angotia-map-creator/src/components/partials/creatorPanel/LayersOption.tsx\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { useSelector } from 'react-redux';\n\nvar LayersOption = function LayersOption() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      layersToRender = _useState4[0],\n      setLayersToRender = _useState4[1];\n\n  var mapBackgorund = useSelector(function (state) {\n    return state.map.mapPic;\n  });\n  var layersListStyles = {\n    display: isOpen ? 'block' : 'none'\n  };\n  useEffect(function () {\n    var layers = document.getElementsByClassName('js-mapLayer');\n    var ltr = Array.from(layers).map(function (layer, id) {\n      var layerName = layer.dataset.layername;\n      return React.createElement(\"li\", {\n        id: \"\".concat(layerName, \"Btn\"),\n        className: \"layersList__layer layersList__layer--active\",\n        key: id,\n        onClick: function onClick() {\n          return toggleLayer(layerName);\n        },\n        \"data-title\": \"click to toggle \".concat(layerName, \" layer\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, layerName);\n    });\n    setLayersToRender(ltr);\n  }, []);\n  var isBackgroundVisible = true;\n\n  var toggleBackground = function toggleBackground() {\n    var map = document.getElementById('map');\n    var button = document.getElementById(\"backgroundBtn\");\n    if (isBackgroundVisible) map.style.backgroundImage = '';else map.style.backgroundImage = \"url('\".concat(mapBackgorund, \"')\");\n    button.classList.toggle('layersList__layer--active');\n    isBackgroundVisible = !isBackgroundVisible;\n  };\n\n  var toggleLayer = function toggleLayer(layerName) {\n    var layers = document.getElementsByClassName('js-mapLayer');\n    Array.from(layers).forEach(function (layer) {\n      var name = layer.dataset.layername;\n\n      if (name === layerName) {\n        var computedDisplay = getComputedStyle(layer).display;\n        var display = layer.style.display === '' ? computedDisplay : layer.style.display;\n        var button = document.getElementById(\"\".concat(name, \"Btn\"));\n        if (display === 'block') layer.style.display = \"none\";else layer.style.display = \"block\";\n        button.classList.toggle('layersList__layer--active');\n      }\n    });\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    role: \"button\",\n    className: \"option option--textOption option--layers\",\n    onClick: function onClick() {\n      return setIsOpen(!isOpen);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Layers\")), React.createElement(\"ul\", {\n    className: \"layersList\",\n    style: layersListStyles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    id: \"backgroundBtn\",\n    onClick: toggleBackground,\n    className: \"layersList__layer layersList__layer--active\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"background\"), layersToRender));\n};\n\nexport default LayersOption;","map":{"version":3,"sources":["/home/kostek/Documents/Programming/angotia-map-creator/src/components/partials/creatorPanel/LayersOption.tsx"],"names":["React","useState","useEffect","Fragment","useSelector","LayersOption","isOpen","setIsOpen","layersToRender","setLayersToRender","mapBackgorund","state","map","mapPic","layersListStyles","display","layers","document","getElementsByClassName","ltr","Array","from","layer","id","layerName","dataset","layername","toggleLayer","isBackgroundVisible","toggleBackground","getElementById","button","style","backgroundImage","classList","toggle","forEach","name","computedDisplay","getComputedStyle"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { useSelector } from 'react-redux';\n\n\nconst LayersOption: React.FC = () => {\n    const [isOpen, setIsOpen] = useState<Boolean>(false);    \n    const [layersToRender, setLayersToRender] = useState<any>(null);\n    const mapBackgorund = useSelector(state =>  state.map.mapPic);\n\n    const layersListStyles = {\n        display: isOpen ? 'block' : 'none'\n    }\n\n    useEffect((): void => {\n        const layers = document.getElementsByClassName('js-mapLayer');\n\n        const ltr = Array.from(layers).map((layer: any, id: number) => {\n            const layerName = layer.dataset.layername;\n            return (\n                <li id={`${layerName}Btn`} className=\"layersList__layer layersList__layer--active\" key={id} onClick={() => toggleLayer(layerName)} data-title={`click to toggle ${layerName} layer`}>{layerName}</li>\n            )\n        })\n\n        setLayersToRender(ltr);\n\n    }, [])\n\n    let isBackgroundVisible: boolean = true;\n    const toggleBackground = () => {\n        const map: any = document.getElementById('map');\n        const button: any = document.getElementById(`backgroundBtn`);\n\n        if (isBackgroundVisible) map.style.backgroundImage = '';\n        else map.style.backgroundImage = `url('${mapBackgorund}')`\n\n        button.classList.toggle('layersList__layer--active');\n        isBackgroundVisible = !isBackgroundVisible;\n    }\n\n    const toggleLayer = (layerName: string): void => {\n        const layers = document.getElementsByClassName('js-mapLayer');\n\n        Array.from(layers).forEach((layer: any) => {\n            const name: string = layer.dataset.layername;\n  \n            if (name === layerName) {\n                const computedDisplay = getComputedStyle(layer).display;\n                const display: string = layer.style.display === '' ? computedDisplay : layer.style.display;\n                const button: any = document.getElementById(`${name}Btn`);\n\n                if (display === 'block') layer.style.display = \"none\";\n                else layer.style.display = \"block\";\n\n                button.classList.toggle('layersList__layer--active');\n \n            }\n        })\n    }\n\n    return (\n        <Fragment>\n            <div role=\"button\" className=\"option option--textOption option--layers\" onClick={() => setIsOpen(!isOpen)}> \n                <span>Layers</span>\n            </div>\n            <ul className=\"layersList\" style={layersListStyles}>\n                <li id=\"backgroundBtn\" onClick={toggleBackground} className=\"layersList__layer layersList__layer--active\">background</li>\n                { layersToRender }\n            </ul>\n        </Fragment>\n    )\n}\n\n\nexport default LayersOption;"]},"metadata":{},"sourceType":"module"}