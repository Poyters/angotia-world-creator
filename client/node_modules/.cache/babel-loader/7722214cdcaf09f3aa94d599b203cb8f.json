{"ast":null,"code":"//Import configs\nimport creatorConfig from '../configs/creatorConfig.json'; //Import scripts\n\nimport { deepCopy } from './matrix';\nimport { drawCross, drawTriangle } from './draw/drawShape';\nimport { makeImage } from './draw/makeImage';\nvar fieldSize = creatorConfig.map.fieldSize;\nvar squareSize = creatorConfig.map.fieldSize / 2;\nexport var colorBasedOnMatrix = function colorBasedOnMatrix(matrix, canvasId, color, specialView) {\n  var copyOfmatrix = deepCopy(matrix);\n  var canvas = document.getElementById(canvasId);\n  var ctx = canvas.getContext(\"2d\");\n  copyOfmatrix.map(function (yAxis, y) {\n    yAxis.map(function (field, x) {\n      var squareMatrix = [field[0][0], field[0][1], field[1][0], field[1][1]];\n      squareMatrix.map(function (square, index) {\n        if (square !== 0 && square) {\n          var xDelta = index === 1 || index === 3 ? squareSize : 0;\n          var yDelta = index === 2 || index === 3 ? squareSize : 0;\n          var drawStartX = x * fieldSize + xDelta;\n          var drawStartY = y * fieldSize + yDelta;\n\n          switch (specialView) {\n            case 'barrier':\n              drawCross(ctx, x * fieldSize + xDelta, y * fieldSize + yDelta);\n              break;\n\n            case 'vertexWeight':\n              var vertexWeightColor = creatorConfig.vertexWeight.color;\n              drawTriangle(ctx, drawStartX, drawStartY, vertexWeightColor);\n              ctx.fillStyle = '#fff';\n              ctx.fillText(square, drawStartX + 10, drawStartY + 18);\n              break;\n\n            case 'image':\n              var image = makeImage(square); //square is path to image\n\n              if (image.width <= fieldSize / 2 && image.height <= fieldSize / 2) {\n                //square size\n                ctx.drawImage(image, drawStartX, drawStartY);\n              } else {\n                //field size\n                if (index === 0) {\n                  ctx.drawImage(image, drawStartX, drawStartY);\n                }\n              }\n\n              break;\n\n            default:\n              ctx.fillStyle = color;\n              ctx.fillRect(x * fieldSize + xDelta, y * fieldSize + yDelta, fieldSize / 2, fieldSize / 2);\n              ctx.closePath();\n              ctx.stroke();\n              break;\n          }\n        }\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/home/kostek/Documents/Programming/angotia-map-creator/src/assets/scripts/colorBasedOnMatrix.ts"],"names":["creatorConfig","deepCopy","drawCross","drawTriangle","makeImage","fieldSize","map","squareSize","colorBasedOnMatrix","matrix","canvasId","color","specialView","copyOfmatrix","canvas","document","getElementById","ctx","getContext","yAxis","y","field","x","squareMatrix","square","index","xDelta","yDelta","drawStartX","drawStartY","vertexWeightColor","vertexWeight","fillStyle","fillText","image","width","height","drawImage","fillRect","closePath","stroke"],"mappings":"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","sourcesContent":["//Import configs\nimport creatorConfig from '../configs/creatorConfig.json';\n\n//Import scripts\nimport { deepCopy } from './matrix';\nimport { drawCross, drawTriangle } from './draw/drawShape';\nimport { makeImage } from './draw/makeImage';\n\n\nconst fieldSize: number = creatorConfig.map.fieldSize;\nconst squareSize: number = creatorConfig.map.fieldSize / 2;\n\nexport const colorBasedOnMatrix = (matrix: any[], canvasId: string, color, specialView?: string): void => {\n    const copyOfmatrix: Array<any> = deepCopy(matrix);\n    const canvas: any = document.getElementById(canvasId);\n    const ctx: any = canvas.getContext(\"2d\");\n\n    copyOfmatrix.map((yAxis: Array<number>, y:number) => {\n      yAxis.map((field: number, x: number) => {\n        const squareMatrix: Array<number> = [\n          field[0][0],\n          field[0][1],\n          field[1][0],\n          field[1][1]\n        ];\n  \n        squareMatrix.map((square: number, index: number) => {\n          if (square !== 0 && square) {\n            const xDelta: number = index === 1 || index === 3 ?  squareSize : 0;\n            const yDelta: number = index === 2 || index === 3 ? squareSize : 0;\n            const drawStartX = x*fieldSize + xDelta;\n            const drawStartY = y*fieldSize + yDelta;\n\n            switch(specialView) {\n              case 'barrier':\n                drawCross(ctx, x*fieldSize + xDelta, y*fieldSize + yDelta);\n              break;\n              case 'vertexWeight':\n                const vertexWeightColor: string = creatorConfig.vertexWeight.color;\n                \n                drawTriangle(ctx, drawStartX, drawStartY, vertexWeightColor);\n                ctx.fillStyle = '#fff';\n                ctx.fillText(square, drawStartX + 10, drawStartY + 18);\n              break;\n              case 'image':\n                const image = makeImage(square); //square is path to image\n\n                if (image.width <= (fieldSize / 2) && image.height <= (fieldSize / 2)) { //square size\n                  ctx.drawImage(image, drawStartX, drawStartY);\n                }\n                else { //field size\n                  if (index === 0) {\n                    ctx.drawImage(image, drawStartX, drawStartY);\n                  }\n                }\n              break;\n              default:\n                ctx.fillStyle = color;\n                ctx.fillRect(x*fieldSize + xDelta, y*fieldSize + yDelta, fieldSize / 2 , fieldSize / 2);\n                ctx.closePath();\n                ctx.stroke();\n              break;\n            }\n          }\n        });\n  \n      })\n    })\n  }"]},"metadata":{},"sourceType":"module"}