{"ast":null,"code":"import _slicedToArray from \"/home/kostek/Documents/Programming/angotia-map-creator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kostek/Documents/Programming/angotia-map-creator/src/components/partials/creatorPanel/FullScreenOption.tsx\";\nimport React, { useState } from 'react';\n\nvar runFullScreen = function runFullScreen(element) {\n  if (element.requestFullscreen) element.requestFullscreen();\n};\n\nvar closeFullScreen = function closeFullScreen() {\n  if (document.exitFullscreen) document.exitFullscreen();\n};\n\nvar FullScreenOption = function FullScreenOption() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fs = _useState2[0],\n      setFs = _useState2[1];\n\n  var body = document.getElementsByTagName('body')[0];\n\n  var clickHandler = function clickHandler() {\n    if (fs) {\n      closeFullScreen();\n      setFs(false);\n    } else {\n      runFullScreen(body);\n      setFs(true);\n    }\n  };\n\n  var fsOnOff = fs ? 'option--on' : 'option--off'; //It determines icon color\n\n  return React.createElement(\"div\", {\n    role: \"button\",\n    className: \"option option--fullScreen \".concat(fsOnOff),\n    onClick: clickHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"titleContainer\",\n    \"data-title\": \"turn on/off full screen mode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }));\n};\n\nexport default FullScreenOption;","map":{"version":3,"sources":["/home/kostek/Documents/Programming/angotia-map-creator/src/components/partials/creatorPanel/FullScreenOption.tsx"],"names":["React","useState","runFullScreen","element","requestFullscreen","closeFullScreen","document","exitFullscreen","FullScreenOption","fs","setFs","body","getElementsByTagName","clickHandler","fsOnOff"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAgC;AACrD,MAAIA,OAAO,CAACC,iBAAZ,EACCD,OAAO,CAACC,iBAAR;AACD,CAHD;;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAY;AAClC,MAAIC,QAAQ,CAACC,cAAb,EACAD,QAAQ,CAACC,cAAT;AACD,CAHD;;AAMA,IAAMC,gBAA0B,GAAG,SAA7BA,gBAA6B,GAAM;AAAA,kBACnBP,QAAQ,CAAU,KAAV,CADW;AAAA;AAAA,MAChCQ,EADgC;AAAA,MAC5BC,KAD4B;;AAEvC,MAAMC,IAAiB,GAAGL,QAAQ,CAACM,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAA1B;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAY;AAC/B,QAAIJ,EAAJ,EAAQ;AACNJ,MAAAA,eAAe;AACfK,MAAAA,KAAK,CAAC,KAAD,CAAL;AACD,KAHD,MAIK;AACHR,MAAAA,aAAa,CAACS,IAAD,CAAb;AACAD,MAAAA,KAAK,CAAC,IAAD,CAAL;AACD;AACF,GATD;;AAWA,MAAMI,OAAe,GAAGL,EAAE,GAAG,YAAH,GAAkB,aAA5C,CAfuC,CAeoB;;AAE3D,SACE;AAAK,IAAA,IAAI,EAAC,QAAV;AAAmB,IAAA,SAAS,sCAA+BK,OAA/B,CAA5B;AAAsE,IAAA,OAAO,EAAED,YAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,kBAAW,8BAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAtBD;;AAyBA,eAAeL,gBAAf","sourcesContent":["import React, { useState } from 'react';\n\n\nconst runFullScreen = (element: HTMLElement): void => {\n\tif (element.requestFullscreen)\n\t\telement.requestFullscreen();\n}\n\nconst closeFullScreen = (): void => {\n  if (document.exitFullscreen)\n\t\tdocument.exitFullscreen();\n}\n\n\nconst FullScreenOption: React.FC = () => {\n  const [fs, setFs] = useState<boolean>(false);\n  const body: HTMLElement = document.getElementsByTagName('body')[0];\n\n  const clickHandler = (): void => {\n    if (fs) {\n      closeFullScreen();\n      setFs(false);\n    }\n    else {\n      runFullScreen(body);\n      setFs(true);\n    }\n  }\n\n  const fsOnOff: string = fs ? 'option--on' : 'option--off'; //It determines icon color\n\n  return (\n    <div role=\"button\" className={`option option--fullScreen ${fsOnOff}`} onClick={clickHandler}>\n      <div className=\"titleContainer\" data-title=\"turn on/off full screen mode\"></div>\n    </div>\n  );\n}\n\n\nexport default FullScreenOption;"]},"metadata":{},"sourceType":"module"}