{"ast":null,"code":"import _slicedToArray from \"/home/kostek/Documents/Programming/angotia-map-creator/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kostek/Documents/Programming/angotia-map-creator/client/src/components/partials/entryPanel/EntryPanel.tsx\";\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router'; //Import other components\n\nimport MapSizeInput from './MapSizeInput'; //Import actions\n\nimport { setMapSizes } from '../../../redux/actions/mapActions'; //Import configs\n\nimport creatorConfig from '../../../assets/configs/creatorConfig.json';\nvar mapSizes = {\n  x: 0,\n  y: 0\n};\n\nvar EntryPanel = function EntryPanel() {\n  var mapSize = useSelector(function (state) {\n    return state.map.size;\n  });\n\n  var _useState = useState(mapSize.x),\n      _useState2 = _slicedToArray(_useState, 2),\n      mapX = _useState2[0],\n      setMapX = _useState2[1];\n\n  var _useState3 = useState(mapSize.y),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mapY = _useState4[0],\n      setMapY = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      valMess = _useState6[0],\n      setValMess = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      redirect = _useState8[0],\n      setRedirect = _useState8[1];\n\n  var dispatch = useDispatch();\n\n  var mapSizeValidation = function mapSizeValidation() {\n    var mapSizeX = typeof mapX === \"number\" ? mapX : parseInt(mapX);\n    var mapSizeY = typeof mapY === \"number\" ? mapY : parseInt(mapY);\n\n    if (typeof mapSizeX !== \"number\" || isNaN(mapSizeX) || typeof mapSizeY !== \"number\" || isNaN(mapSizeY)) {\n      setValMess(\"Value need to be number\");\n    } else if (mapSizeX >= creatorConfig.map.maxSize || mapSizeX < creatorConfig.map.minSize || mapSizeY >= creatorConfig.map.maxSize || mapSizeY < creatorConfig.map.minSize) {\n      setValMess(\"Value need to be bigger or equal to \".concat(creatorConfig.map.minSize, \" and smaller than \").concat(creatorConfig.map.maxSize));\n    } else if (mapSizeX % 1 !== 0 || mapSizeY % 1 !== 0) {\n      setValMess(\"Value need to be integer, not float type.\");\n    } else {\n      //Redirect to map.html\n      setValMess(\"\");\n      mapSizes.x = mapSizeX;\n      mapSizes.y = mapSizeY;\n      dispatch(setMapSizes(mapSizes));\n      setRedirect(true);\n    }\n  };\n\n  var content = redirect ? React.createElement(Redirect, {\n    to: \"/creator\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }) : React.createElement(\"ul\", {\n    className: \"entryPanel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"#\",\n    className: \"t-paragraph1Light entryPanel__createBoard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"create new map\"), React.createElement(\"div\", {\n    role: \"presentation\",\n    className: \"entryPanel__sizeBoard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(MapSizeInput, {\n    currValue: mapX,\n    changeValue: setMapX,\n    id: \"yMapSize\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"t-paragraph3Normal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"x\"), React.createElement(MapSizeInput, {\n    currValue: mapY,\n    changeValue: setMapY,\n    id: \"yMapSize\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: mapSizeValidation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"start\")), React.createElement(\"span\", {\n    id: \"validationInfo\",\n    className: \"t-paragraph2Bold entryPanel__validationInfo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, valMess))), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"#\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"t-paragraph1Light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"load map\"))), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"#\",\n    id: \"closeBtn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"t-paragraphLight\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"exit\"))));\n  return content;\n};\n\nexport default EntryPanel;","map":{"version":3,"sources":["/home/kostek/Documents/Programming/angotia-map-creator/client/src/components/partials/entryPanel/EntryPanel.tsx"],"names":["React","useState","useSelector","useDispatch","Redirect","MapSizeInput","setMapSizes","creatorConfig","mapSizes","x","y","EntryPanel","mapSize","state","map","size","mapX","setMapX","mapY","setMapY","valMess","setValMess","redirect","setRedirect","dispatch","mapSizeValidation","mapSizeX","parseInt","mapSizeY","isNaN","maxSize","minSize","content"],"mappings":"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","sourcesContent":["import React , { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router';\n\n//Import other components\nimport MapSizeInput from './MapSizeInput';\n\n//Import actions\nimport { setMapSizes } from '../../../redux/actions/mapActions';\n\n//Import configs\nimport creatorConfig from '../../../assets/configs/creatorConfig.json';\n\n\nlet mapSizes = {\n  x: 0,\n  y: 0\n}\n\n\nconst EntryPanel: React.FC = () => {\n  const mapSize = useSelector(state => state.map.size);\n  const [mapX, setMapX] = useState<number>(mapSize.x);\n  const [mapY, setMapY] = useState<number>(mapSize.y);\n  const [valMess, setValMess] = useState<string>('');\n  const [redirect, setRedirect] = useState<boolean>(false);\n  const dispatch = useDispatch();\n\n  const mapSizeValidation = ():void => {\n    const mapSizeX:number = typeof mapX === \"number\" ? mapX : parseInt(mapX);\n    const mapSizeY:number = typeof mapY === \"number\" ? mapY : parseInt(mapY);\n    \n    if ((typeof mapSizeX !== \"number\" || isNaN(mapSizeX)) || \n    (typeof mapSizeY !== \"number\" || isNaN(mapSizeY))) {\n      setValMess(\"Value need to be number\");\n    }\n    else if ((mapSizeX >= creatorConfig.map.maxSize || mapSizeX < creatorConfig.map.minSize) || (mapSizeY >= creatorConfig.map.maxSize || mapSizeY < creatorConfig.map.minSize)) {\n      setValMess(`Value need to be bigger or equal to ${creatorConfig.map.minSize} and smaller than ${creatorConfig.map.maxSize}`);\n    }\n    else if (mapSizeX % 1 !== 0 || mapSizeY % 1 !== 0) {\n      setValMess(\"Value need to be integer, not float type.\");\n    }\n    else { //Redirect to map.html\n      setValMess(\"\");\n      mapSizes.x = mapSizeX\n      mapSizes.y = mapSizeY;\n\n      dispatch(setMapSizes(mapSizes))\n      setRedirect(true);\n    }\n\n  }\n\n  const content = redirect ? (\n    <Redirect to='/creator'/>\n  ) : (\n    <ul className=\"entryPanel\">\n      <li>\n        <a href=\"#\" className=\"t-paragraph1Light entryPanel__createBoard\">\n          <span>\n            create new map\n          </span>\n          <div role=\"presentation\" className=\"entryPanel__sizeBoard\">\n            <MapSizeInput\n              currValue={mapX}\n              changeValue={setMapX}\n              id=\"yMapSize\"\n            />\n            <span className=\"t-paragraph3Normal\">x</span>\n            <MapSizeInput\n              currValue={mapY}\n              changeValue={setMapY}\n              id=\"yMapSize\"\n            />\n            <button onClick={mapSizeValidation}>start</button>\n          </div>\n          <span id=\"validationInfo\" className=\"t-paragraph2Bold entryPanel__validationInfo\">\n            {valMess}\n          </span>\n        </a>\n      </li>\n      <li>\n        <a href=\"#\">\n          <span className=\"t-paragraph1Light\">\n            load map\n          </span>\n        </a>\n      </li>\n      <li>\n        <a href=\"#\" id=\"closeBtn\">\n          <span className=\"t-paragraphLight\">\n            exit\n          </span>\n        </a>\n      </li>\n    </ul>\n  );\n\n  return (\n    content\n  );\n}\n\n\nexport default EntryPanel;\n"]},"metadata":{},"sourceType":"module"}