{"ast":null,"code":"import { store } from '../../App'; //Import scripts\n\nimport { colorBasedOnMatrix } from './colorBasedOnMatrix';\nimport { clearCanvas } from './clearCanvas';\nimport { emptyMapCanvasCtx } from './map';\nimport { setActionNote } from './notifications';\nimport { updateMatrixByTheOther, deepCopy } from './matrix'; //Import configs\n\nimport creatorConfig from '../configs/creatorConfig.json'; //Import actions\n\nimport { changeMapSelectMatrix } from '../../redux/actions/mapActions';\nvar pressedKey = -1;\ndocument.addEventListener('keydown', function (event) {\n  return pressedKey = event.keyCode;\n});\nexport var markSquare = function markSquare(sourceMatrix, sourceMatrixCanvas, changeMatrixMethod, note, fillColor, fillStyle) {\n  var storeData = store.getState();\n  var selectMatrix = deepCopy(storeData.map.select.matrix);\n  var sourceMatrixCopy = deepCopy(sourceMatrix);\n  var typeOfAction = pressedKey === creatorConfig.secondOptionKeyCode ? 0 : 1; //secondOptionKeyCode determines second type of used action, eg at this example, you can add passage, but when you press key wich has the same code as secondOptionKeyCode, you delete selected passage\n\n  if ((fillStyle === 'image' || fillStyle === 'vertexWeight') && pressedKey !== creatorConfig.secondOptionKeyCode) typeOfAction = fillColor;\n  var newMatrix = deepCopy(updateMatrixByTheOther(sourceMatrixCopy, selectMatrix, typeOfAction));\n  store.dispatch(changeMatrixMethod(newMatrix));\n  clearCanvas(\"mapSelectCanvas\", changeMapSelectMatrix);\n  emptyMapCanvasCtx(sourceMatrixCanvas);\n  colorBasedOnMatrix(newMatrix, sourceMatrixCanvas, fillColor, fillStyle);\n  setActionNote(note);\n  setTimeout(function () {\n    return pressedKey = -1;\n  }, 500); //clear pressedKey. Duration is necessary due to pressing key for a while after running setBlockSquares\n};","map":{"version":3,"sources":["/home/kostek/Documents/Programming/angotia-map-creator/src/assets/scripts/markSquare.ts"],"names":["store","colorBasedOnMatrix","clearCanvas","emptyMapCanvasCtx","setActionNote","updateMatrixByTheOther","deepCopy","creatorConfig","changeMapSelectMatrix","pressedKey","document","addEventListener","event","keyCode","markSquare","sourceMatrix","sourceMatrixCanvas","changeMatrixMethod","note","fillColor","fillStyle","storeData","getState","selectMatrix","map","select","matrix","sourceMatrixCopy","typeOfAction","secondOptionKeyCode","newMatrix","dispatch","setTimeout"],"mappings":"AAAA,SAASA,KAAT,QAAsB,WAAtB,C,CAEA;;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,iBAAT,QAAkC,OAAlC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,sBAAT,EAAiCC,QAAjC,QAAiD,UAAjD,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,+BAA1B,C,CAEA;;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AAGA,IAAIC,UAAkB,GAAG,CAAC,CAA1B;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,UAAAC,KAAK;AAAA,SAAIH,UAAU,GAAGG,KAAK,CAACC,OAAvB;AAAA,CAA1C;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,YAAD,EAAsBC,kBAAtB,EAAkDC,kBAAlD,EAAgFC,IAAhF,EAA8FC,SAA9F,EAAiHC,SAAjH,EAAwI;AAChK,MAAMC,SAAS,GAAGrB,KAAK,CAACsB,QAAN,EAAlB;AACA,MAAMC,YAAmB,GAAGjB,QAAQ,CAACe,SAAS,CAACG,GAAV,CAAcC,MAAd,CAAqBC,MAAtB,CAApC;AACA,MAAMC,gBAAuB,GAAGrB,QAAQ,CAACS,YAAD,CAAxC;AACA,MAAIa,YAA6B,GAAGnB,UAAU,KAAKF,aAAa,CAACsB,mBAA7B,GAAmD,CAAnD,GAAuD,CAA3F,CAJgK,CAIlE;;AAC9F,MAAI,CAACT,SAAS,KAAK,OAAd,IAAyBA,SAAS,KAAK,cAAxC,KAA2DX,UAAU,KAAKF,aAAa,CAACsB,mBAA5F,EAAiHD,YAAY,GAAGT,SAAf;AAEjH,MAAMW,SAAgB,GAAGxB,QAAQ,CAACD,sBAAsB,CAACsB,gBAAD,EAAmBJ,YAAnB,EAAiCK,YAAjC,CAAvB,CAAjC;AAEA5B,EAAAA,KAAK,CAAC+B,QAAN,CAAed,kBAAkB,CAACa,SAAD,CAAjC;AACA5B,EAAAA,WAAW,CAAC,iBAAD,EAAoBM,qBAApB,CAAX;AAEAL,EAAAA,iBAAiB,CAACa,kBAAD,CAAjB;AACAf,EAAAA,kBAAkB,CAAC6B,SAAD,EAAYd,kBAAZ,EAAgCG,SAAhC,EAA2CC,SAA3C,CAAlB;AAEAhB,EAAAA,aAAa,CAACc,IAAD,CAAb;AAEAc,EAAAA,UAAU,CAAC;AAAA,WAAMvB,UAAU,GAAG,CAAC,CAApB;AAAA,GAAD,EAAwB,GAAxB,CAAV,CAjBgK,CAiBzH;AACxC,CAlBM","sourcesContent":["import { store } from '../../App';\n\n//Import scripts\nimport { colorBasedOnMatrix } from './colorBasedOnMatrix';\nimport { clearCanvas } from './clearCanvas';\nimport { emptyMapCanvasCtx } from './map';\nimport { setActionNote } from './notifications';\nimport { updateMatrixByTheOther, deepCopy } from './matrix';\n\n//Import configs\nimport creatorConfig from '../configs/creatorConfig.json';\n\n//Import actions\nimport { changeMapSelectMatrix } from '../../redux/actions/mapActions';\n\n\nlet pressedKey: number = -1;\n\ndocument.addEventListener('keydown', event => pressedKey = event.keyCode);\n\nexport const markSquare = (sourceMatrix: any[], sourceMatrixCanvas: string, changeMatrixMethod: Function, note: string, fillColor: string, fillStyle?: string) => {\n  const storeData = store.getState();\n  const selectMatrix: any[] = deepCopy(storeData.map.select.matrix);\n  const sourceMatrixCopy: any[] = deepCopy(sourceMatrix);\n  let typeOfAction: number | string = pressedKey === creatorConfig.secondOptionKeyCode ? 0 : 1; //secondOptionKeyCode determines second type of used action, eg at this example, you can add passage, but when you press key wich has the same code as secondOptionKeyCode, you delete selected passage\n  if ((fillStyle === 'image' || fillStyle === 'vertexWeight') && pressedKey !== creatorConfig.secondOptionKeyCode) typeOfAction = fillColor;\n\n  const newMatrix: any[] = deepCopy(updateMatrixByTheOther(sourceMatrixCopy, selectMatrix, typeOfAction));\n\n  store.dispatch(changeMatrixMethod(newMatrix));\n  clearCanvas(\"mapSelectCanvas\", changeMapSelectMatrix);\n\n  emptyMapCanvasCtx(sourceMatrixCanvas);\n  colorBasedOnMatrix(newMatrix, sourceMatrixCanvas, fillColor, fillStyle);\n\n  setActionNote(note);\n\n  setTimeout(() => pressedKey = -1, 500) //clear pressedKey. Duration is necessary due to pressing key for a while after running setBlockSquares\n}\n"]},"metadata":{},"sourceType":"module"}