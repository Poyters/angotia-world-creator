{"ast":null,"code":"import _slicedToArray from \"/home/kostek/Documents/Programming/angotia-map-creator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kostek/Documents/Programming/angotia-map-creator/src/components/partials/creatorPanel/vertexWeight/VertexWeightOption.tsx\";\nimport React, { Fragment, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useSelector, useDispatch } from 'react-redux'; //Import configs\n\nimport creatorConfig from '../../../../assets/configs/creatorConfig.json'; //Import scripts\n\nimport { deepCopy, matrixToIds } from '../../../../assets/scripts/matrix';\nimport { markSquare } from '../../../../assets/scripts/markSquare';\nimport { isEmptyMatrix } from '../../../../assets/scripts/isEmptyMatrix';\nimport { setActionNote } from '../../../../assets/scripts/notifications'; //Import components\n\nimport VertexWeightPopup from './VertexWeightPopup'; //Import actions\n\nimport { changeMapVertexWeightMatrix, changeMapVertexWeights } from '../../../../redux/actions/mapActions';\nvar pressedKey = -1;\ndocument.addEventListener('keydown', function (event) {\n  return pressedKey = event.keyCode;\n});\n\nvar VertexWeightOption = function VertexWeightOption() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPopup = _useState2[0],\n      setIsPopup = _useState2[1];\n\n  var selectMatrix = deepCopy(useSelector(function (state) {\n    return state.map.select.matrix;\n  }));\n  var vertexWeightMatrix = useSelector(function (state) {\n    return state.map.vertex.matrix;\n  });\n  var vertexWeights = deepCopy(useSelector(function (state) {\n    return state.map.vertex.weights;\n  }));\n  var dispatch = useDispatch();\n\n  var vertexHandler = function vertexHandler() {\n    if (isEmptyMatrix(selectMatrix)) {\n      setActionNote('Need to select fields', 'warning');\n      return;\n    }\n\n    pressedKey === creatorConfig.secondOptionKeyCode ? deletePassage() : setIsPopup(true);\n    setTimeout(function () {\n      return pressedKey = -1;\n    }, 500);\n  };\n\n  var deletePassage = function deletePassage() {\n    var deleteLocations = matrixToIds(selectMatrix);\n    deleteLocations.forEach(function (location) {\n      if (vertexWeights.some(function (e) {\n        return e.id === location.id;\n      })) {\n        var index = vertexWeights.findIndex(function (x) {\n          return x.id === location.id;\n        });\n        vertexWeights.splice(index, 1);\n      }\n    });\n    dispatch(changeMapVertexWeights(vertexWeights));\n    markSquare(vertexWeightMatrix, 'mapVertexWeightCanvas', changeMapVertexWeightMatrix, 'Vertex weight added', '', 'vertexWeight');\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, isPopup ? ReactDOM.createPortal(React.createElement(VertexWeightPopup, {\n    closePopup: setIsPopup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), document.body) : null, React.createElement(\"div\", {\n    role: \"button\",\n    className: \"option\",\n    onClick: function onClick() {\n      return vertexHandler();\n    },\n    \"data-title\": \"add/delete vertex weight\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"vertexWeightOption\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"vertexWeightOption__number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, creatorConfig.vertexWeight.max))));\n};\n\nexport default VertexWeightOption;","map":{"version":3,"sources":["/home/kostek/Documents/Programming/angotia-map-creator/src/components/partials/creatorPanel/vertexWeight/VertexWeightOption.tsx"],"names":["React","Fragment","useState","ReactDOM","useSelector","useDispatch","creatorConfig","deepCopy","matrixToIds","markSquare","isEmptyMatrix","setActionNote","VertexWeightPopup","changeMapVertexWeightMatrix","changeMapVertexWeights","pressedKey","document","addEventListener","event","keyCode","VertexWeightOption","isPopup","setIsPopup","selectMatrix","state","map","select","matrix","vertexWeightMatrix","vertex","vertexWeights","weights","dispatch","vertexHandler","secondOptionKeyCode","deletePassage","setTimeout","deleteLocations","forEach","location","some","e","id","index","findIndex","x","splice","createPortal","body","vertexWeight","max"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\n//Import configs\nimport creatorConfig from '../../../../assets/configs/creatorConfig.json';\n\n//Import scripts\nimport { deepCopy, matrixToIds } from '../../../../assets/scripts/matrix';\nimport { markSquare } from '../../../../assets/scripts/markSquare';\nimport { isEmptyMatrix } from '../../../../assets/scripts/isEmptyMatrix';\nimport { setActionNote } from '../../../../assets/scripts/notifications';\n\n//Import components\nimport VertexWeightPopup from './VertexWeightPopup';\n\n//Import actions\nimport { changeMapVertexWeightMatrix, changeMapVertexWeights } from '../../../../redux/actions/mapActions';\n\n\nlet pressedKey: number = -1;\ndocument.addEventListener('keydown', event => pressedKey = event.keyCode);\n\nconst VertexWeightOption: React.FC = () => {\n    const [isPopup, setIsPopup] = useState<Boolean>(false);\n    const selectMatrix = deepCopy(useSelector(state => state.map.select.matrix));\n    const vertexWeightMatrix = useSelector(state => state.map.vertex.matrix);\n    let vertexWeights = deepCopy(useSelector(state => state.map.vertex.weights));\n    const dispatch = useDispatch(); \n\n    const vertexHandler = () => {\n        if (isEmptyMatrix(selectMatrix)) {\n            setActionNote('Need to select fields', 'warning');\n            return;\n        }\n\n        pressedKey === creatorConfig.secondOptionKeyCode ? deletePassage() : setIsPopup(true);\n\n        setTimeout(() => pressedKey = -1, 500) \n    }\n    \n    const deletePassage = () => {\n        const deleteLocations = matrixToIds(selectMatrix);\n\n        deleteLocations.forEach(location => {\n            if (vertexWeights.some(e => e.id === location.id)) {\n                const index = vertexWeights.findIndex(x => x.id === location.id);\n\n                vertexWeights.splice(index, 1);\n              }\n        })\n\n        dispatch(changeMapVertexWeights(vertexWeights));\n        markSquare(vertexWeightMatrix, 'mapVertexWeightCanvas', changeMapVertexWeightMatrix, 'Vertex weight added', '', 'vertexWeight')\n    }\n\n    return (\n        <Fragment>\n            { isPopup ? ReactDOM.createPortal(<VertexWeightPopup closePopup={setIsPopup}/>, document.body) : null}\n            <div role=\"button\" className=\"option\" onClick={() => vertexHandler()} data-title=\"add/delete vertex weight\">\n\t\t\t\t<div className=\"vertexWeightOption\">\n\t\t\t\t\t<div className=\"vertexWeightOption__number\">\n                        { creatorConfig.vertexWeight.max }\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n        </Fragment>\n    )\n}\n\n\nexport default VertexWeightOption;"]},"metadata":{},"sourceType":"module"}