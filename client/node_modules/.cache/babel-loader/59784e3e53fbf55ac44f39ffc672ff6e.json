{"ast":null,"code":"import _slicedToArray from \"/home/kostek/Documents/Programming/angotia-map-creator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kostek/Documents/Programming/angotia-map-creator/src/components/partials/creatorPanel/NetOption.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux'; //Import scripts\n\nimport { drawMapNet } from '../../../assets/scripts/drawNetMap';\nimport { emptyMapCanvasCtx } from '../../../assets/scripts/map';\nimport { setActionNote } from '../../../assets/scripts/notifications'; //Import actions\n\nimport { setMapNets } from '../../../redux/actions/mapActions';\n\nvar NetOption = function NetOption(_ref) {\n  var viewTypeQuantity = _ref.viewTypeQuantity;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      optionViewType = _useState2[0],\n      setOptionViewType = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var changeViewType = function changeViewType() {\n    if (optionViewType === viewTypeQuantity) setOptionViewType(0);else setOptionViewType(optionViewType + 1);\n  };\n\n  useEffect(function () {\n    var ctx = emptyMapCanvasCtx(\"mapCanvas\");\n\n    switch (optionViewType) {\n      case 0:\n        //all nets\n        drawMapNet(ctx, 1);\n        drawMapNet(ctx, 0);\n        dispatch(setMapNets({\n          field: true,\n          square: true\n        }));\n        setActionNote(\"Square and field nets are visible now\");\n        break;\n\n      case 1:\n        //field net\n        drawMapNet(ctx, 0);\n        dispatch(setMapNets({\n          field: true,\n          square: false\n        }));\n        setActionNote(\"Only field nets are visible\");\n        break;\n\n      case 2:\n        //square net;\n        drawMapNet(ctx, 1);\n        dispatch(setMapNets({\n          field: false,\n          square: true\n        }));\n        setActionNote(\"Only square nets are visible\");\n        break;\n\n      case 3:\n        dispatch(setMapNets({\n          field: false,\n          square: false\n        }));\n        setActionNote(\"Disable all nets\");\n        return;\n    }\n  });\n  var netOnOff = optionViewType === 3 ? 'option--off' : 'option--on'; //It determines icon color\n\n  return React.createElement(\"div\", {\n    className: \"option option--net\",\n    onClick: changeViewType,\n    \"data-title\": \"click to change nets mode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"option__viewType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, optionViewType), React.createElement(\"div\", {\n    className: \"netGraphic \".concat(netOnOff),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"netGraphic__square\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"netGraphic__square\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"netGraphic__square\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"netGraphic__square\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })));\n};\n\nexport default NetOption;","map":{"version":3,"sources":["/home/kostek/Documents/Programming/angotia-map-creator/src/components/partials/creatorPanel/NetOption.tsx"],"names":["React","useState","useEffect","useDispatch","drawMapNet","emptyMapCanvasCtx","setActionNote","setMapNets","NetOption","viewTypeQuantity","optionViewType","setOptionViewType","dispatch","changeViewType","ctx","field","square","netOnOff"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\n//Import scripts\nimport { drawMapNet } from '../../../assets/scripts/drawNetMap';\nimport { emptyMapCanvasCtx } from '../../../assets/scripts/map';\nimport { setActionNote } from '../../../assets/scripts/notifications';\n\n//Import actions\nimport { setMapNets } from '../../../redux/actions/mapActions';\n\n\ninterface INetOption {\n  viewTypeQuantity: number\n}\n\n\nconst NetOption: React.FC<INetOption> = ({ viewTypeQuantity }) => {\n  const [optionViewType, setOptionViewType] = useState<number>(0);\n  const dispatch = useDispatch();\n\n  const changeViewType = (): void => {\n    if (optionViewType === viewTypeQuantity) setOptionViewType(0);\n    else setOptionViewType(optionViewType + 1);\n  }\n\n  useEffect((): void => {\n    const ctx: any = emptyMapCanvasCtx(\"mapCanvas\");\n\n    switch(optionViewType) {\n      case 0: //all nets\n        drawMapNet(ctx, 1);\n        drawMapNet(ctx, 0);\n        dispatch(setMapNets({field: true, square: true}));\n        setActionNote(\"Square and field nets are visible now\");\n      break;\n      case 1: //field net\n        drawMapNet(ctx, 0);\n        dispatch(setMapNets({field: true, square: false}));\n        setActionNote(\"Only field nets are visible\");\n      break;\n      case 2: //square net;\n        drawMapNet(ctx, 1);\n        dispatch(setMapNets({field: false, square: true}));\n        setActionNote(\"Only square nets are visible\");\n      break;\n      case 3:\n        dispatch(setMapNets({field: false, square: false}));\n        setActionNote(\"Disable all nets\");\n        return;\n    }\n  })\n\n  const netOnOff: string = optionViewType === 3 ? 'option--off' : 'option--on'; //It determines icon color\n\n  return (\n    <div className=\"option option--net\" onClick={changeViewType} data-title=\"click to change nets mode\">\n      <span className=\"option__viewType\">{optionViewType}</span>\n      <div className={`netGraphic ${netOnOff}`}>\n        <div className=\"netGraphic__square\"></div>\n        <div className=\"netGraphic__square\"></div>\n        <div className=\"netGraphic__square\"></div>\n        <div className=\"netGraphic__square\"></div>\n      </div>\n    </div>\n  );\n}\n\n\nexport default NetOption;"]},"metadata":{},"sourceType":"module"}