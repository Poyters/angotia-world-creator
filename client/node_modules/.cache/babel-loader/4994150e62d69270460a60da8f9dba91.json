{"ast":null,"code":"//Import interfaces\nexport var updateMatrixByTheOther = function updateMatrixByTheOther(rootMatrix, upgradeMatrix, setValue) {\n  var copyOfRootMatrix = deepCopy(rootMatrix);\n  var copyOfUpgradeMatrix = deepCopy(upgradeMatrix);\n  copyOfUpgradeMatrix.forEach(function (yAxis, y) {\n    yAxis.forEach(function (field, x) {\n      var squareMatrix = [field[0][0], field[0][1], field[1][0], field[1][1]];\n      squareMatrix.forEach(function (square, squareIndex) {\n        if (square && square !== 0) {\n          var fieldArray = squareIndex >= 2 ? 1 : 0;\n          var squarePos = fieldArray === 0 ? squareIndex : squareIndex - 2;\n          copyOfRootMatrix[y][x][fieldArray][squarePos] = setValue; //add new values to the rootMatrix\n        }\n      });\n    });\n  });\n  return deepCopy(copyOfRootMatrix);\n};\nexport var deepCopy = function deepCopy(item) {\n  var copy = JSON.parse(JSON.stringify(item));\n  return copy;\n};\nexport var matrixToIds = function matrixToIds(matrix) {\n  var copyOfmatrix = deepCopy(matrix);\n  var squareIds = [];\n  copyOfmatrix.map(function (yAxis, y) {\n    yAxis.map(function (field, x) {\n      var squareMatrix = [field[0][0], field[0][1], field[1][0], field[1][1]];\n      squareMatrix.map(function (square, index) {\n        if (square === 1) {\n          var xDelta = index === 1 || index === 3 ? 1 : 0;\n          var yDelta = index === 2 || index === 3 ? 1 : 0;\n          var squareId = {\n            x: x,\n            y: y,\n            xDelta: xDelta,\n            yDelta: yDelta,\n            id: \"\".concat(x, \".\").concat(xDelta, \", \").concat(y, \".\").concat(yDelta)\n          };\n          squareIds.push(squareId);\n        }\n      });\n    });\n  });\n  return squareIds;\n};","map":{"version":3,"sources":["/home/kostek/Documents/Programming/angotia-map-creator/src/assets/scripts/matrix.ts"],"names":["updateMatrixByTheOther","rootMatrix","upgradeMatrix","setValue","copyOfRootMatrix","deepCopy","copyOfUpgradeMatrix","forEach","yAxis","y","field","x","squareMatrix","square","squareIndex","fieldArray","squarePos","item","copy","JSON","parse","stringify","matrixToIds","matrix","copyOfmatrix","squareIds","map","index","xDelta","yDelta","squareId","id","push"],"mappings":"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","sourcesContent":["//Import interfaces\nimport { ISquareData } from '../interfaces/squareInterfaces';\n\n\nexport const updateMatrixByTheOther = (rootMatrix: any[], upgradeMatrix: any[], setValue: number | string): any[] => {\n\tconst copyOfRootMatrix: any[] = deepCopy(rootMatrix);\n\tconst copyOfUpgradeMatrix: any[] = deepCopy(upgradeMatrix);\n\n\tcopyOfUpgradeMatrix.forEach((yAxis: Array<number>, y:number) => {\n\t\tyAxis.forEach((field: number, x: number) => {\n\t\t\tconst squareMatrix: Array<number> = [\n\t\t\t\tfield[0][0],\n\t\t\t\tfield[0][1],\n\t\t\t\tfield[1][0],\n\t\t\t\tfield[1][1]\n\t\t\t];\n\n\t\t\tsquareMatrix.forEach((square: number, squareIndex: number) => {\n\t\t\t\tif (square && square !== 0) {\n\t\t\t\t\tconst fieldArray = squareIndex >= 2 ? 1 : 0;\n\t\t\t\t\tconst squarePos = fieldArray === 0 ? squareIndex : squareIndex - 2;\n\n\t\t\t\t\tcopyOfRootMatrix[y][x][fieldArray][squarePos] = setValue; //add new values to the rootMatrix\n\t\t\t\t}\n\t\t\t});\n\n\t\t})\n\t})\n\n\treturn deepCopy(copyOfRootMatrix);\n}\n\n\nexport const deepCopy = (item): any[] => {\n\tconst copy = JSON.parse(JSON.stringify(item));\n\n\treturn copy;\n}\n\n\n\nexport const matrixToIds = (matrix: any[]): ISquareData[] => {\n\tconst copyOfmatrix: Array<any> = deepCopy(matrix);\n\tconst squareIds: any = [];\n  \n\tcopyOfmatrix.map((yAxis: Array<number>, y:number) => {\n\t  yAxis.map((field: number, x: number) => {\n\t\tconst squareMatrix: Array<number> = [\n\t\t  field[0][0],\n\t\t  field[0][1],\n\t\t  field[1][0],\n\t\t  field[1][1]\n\t\t];\n  \n\t\tsquareMatrix.map((square: number, index: number) => {\n\t\t  if (square === 1) {\n\t\t\tconst xDelta: number = index === 1 || index === 3 ? 1 : 0;\n\t\t\tconst yDelta: number = index === 2 || index === 3 ? 1 : 0;\n\t\t\tconst squareId: ISquareData = {\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\txDelta,\n\t\t\t\tyDelta,\n\t\t\t\tid: `${x}.${xDelta}, ${y}.${yDelta}`\n\t\t\t}\n  \n\t\t\tsquareIds.push(squareId)\n\t\t  }\n\t\t});\n  \n\t  })\n\t})\n\n\treturn squareIds;\n  }"]},"metadata":{},"sourceType":"module"}