{"ast":null,"code":"import _toConsumableArray from \"/home/kostek/Documents/Programming/angotia-map-creator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { store } from '../../App'; //Import configs\n\nimport creatorConfig from '../configs/creatorConfig.json'; //Import actions\n\nimport { changeMapSelectMatrix } from '../../redux/actions/mapActions'; //Import scripts\n\nimport { mouseSelectFields } from './mouseSelectFields'; //Import interfaces\n\nexport var selectFieldsHandler = function selectFieldsHandler(event) {\n  var map = document.getElementById(\"map\");\n  var mapLeft = parseInt(map.style.left);\n  var mapTop = parseInt(map.style.top);\n  if (isNaN(mapLeft)) mapLeft = 0;\n  if (isNaN(mapTop)) mapTop = 0;\n  var cursorPosition = {\n    x: event.clientX - mapLeft,\n    y: event.clientY - mapTop\n  };\n  selectField(cursorPosition);\n};\n\nvar selectField = function selectField(cursorPosition) {\n  var storeData = store.getState();\n  var selectType = storeData.map.select.type;\n\n  var selectMatrix = _toConsumableArray(storeData.map.select.matrix);\n\n  var fieldSize = creatorConfig.map.fieldSize;\n  var mapNetsStatus = storeData.map.net;\n  var positionDelta = {\n    x: -1,\n    y: -1\n  };\n  if (!mapNetsStatus.field && !mapNetsStatus.square || selectType === 'none') return; //no nets, no select\n\n  switch (selectType) {\n    case \"field\":\n      positionDelta = {\n        x: Math.floor(cursorPosition.x / fieldSize),\n        y: Math.floor(cursorPosition.y / fieldSize)\n      };\n      selectCanvasField(selectMatrix, positionDelta);\n      break;\n\n    case \"square\":\n      positionDelta = {\n        x: Math.floor(cursorPosition.x / (fieldSize / 2)),\n        y: Math.floor(cursorPosition.y / (fieldSize / 2))\n      };\n      selectCanvasSquare(selectMatrix, positionDelta);\n      break;\n\n    case \"mouse\":\n      mouseSelectFields();\n      break;\n\n    default:\n      throw new Error('Invalid select map type.');\n  }\n\n  store.dispatch(changeMapSelectMatrix(selectMatrix));\n  colorChecked(positionDelta, selectType);\n};\n\nvar colorChecked = function colorChecked(positionDelta, type) {\n  var canvas = document.getElementById(\"mapSelectCanvas\");\n  var ctx = canvas.getContext(\"2d\");\n  var fieldSize = creatorConfig.map.fieldSize;\n  if (type === 'square') fieldSize = fieldSize / 2;\n  var posX = positionDelta.x * fieldSize;\n  var posY = positionDelta.y * fieldSize;\n  ctx.fillStyle = creatorConfig.selectColor;\n  ctx.fillRect(posX, posY, fieldSize, fieldSize);\n  ctx.closePath();\n  ctx.stroke();\n};\n\nexport var selectCanvasSquare = function selectCanvasSquare(selectMatrix, squarePosition) {\n  //squarePosition determines x and y axis of squares, eg. x: 2, y: 4 and it fill to field x: 1, y: 2\n  var fieldPosition = {\n    x: Math.floor(squarePosition.x / 2),\n    y: Math.floor(squarePosition.y / 2)\n  };\n  var squareDelta = {\n    x: Math.floor(squarePosition.x % 2),\n    y: Math.floor(squarePosition.y % 2)\n  };\n  selectMatrix[fieldPosition.y][fieldPosition.x][squareDelta.y][squareDelta.x] = 1;\n};\n\nvar selectCanvasField = function selectCanvasField(selectMatrix, fieldPosition) {\n  selectMatrix[fieldPosition.y][fieldPosition.x] = [[1, 1], [1, 1]]; //Select whole field\n};","map":{"version":3,"sources":["/home/kostek/Documents/Programming/angotia-map-creator/src/assets/scripts/selectFields.ts"],"names":["store","creatorConfig","changeMapSelectMatrix","mouseSelectFields","selectFieldsHandler","event","map","document","getElementById","mapLeft","parseInt","style","left","mapTop","top","isNaN","cursorPosition","x","clientX","y","clientY","selectField","storeData","getState","selectType","select","type","selectMatrix","matrix","fieldSize","mapNetsStatus","net","positionDelta","field","square","Math","floor","selectCanvasField","selectCanvasSquare","Error","dispatch","colorChecked","canvas","ctx","getContext","posX","posY","fillStyle","selectColor","fillRect","closePath","stroke","squarePosition","fieldPosition","squareDelta"],"mappings":"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","sourcesContent":["import { store } from '../../App';\n\n//Import configs\nimport creatorConfig from '../configs/creatorConfig.json';\n\n//Import actions\nimport { changeMapSelectMatrix } from '../../redux/actions/mapActions';\n\n//Import scripts\nimport { mouseSelectFields } from './mouseSelectFields';\n\n//Import interfaces\nimport { IPoint } from '../interfaces/pointInterfaces';\n\n\nexport const selectFieldsHandler = (event: React.MouseEvent<HTMLElement>) => {\n  const map: any = document.getElementById(\"map\");\n  let mapLeft: number = parseInt(map.style.left);\n  let mapTop: number = parseInt(map.style.top);\n\n  if (isNaN(mapLeft)) mapLeft = 0;\n  if (isNaN(mapTop)) mapTop = 0;\n\n  const cursorPosition: IPoint = {\n    x: event.clientX - mapLeft, \n    y: event.clientY - mapTop\n  };\n\n  selectField(cursorPosition);\n}\n\n\nconst selectField = (cursorPosition: IPoint) => {\n  const storeData = store.getState();\n  const selectType: string = storeData.map.select.type;\n  const selectMatrix: Array<number> = [...storeData.map.select.matrix];\n  const fieldSize: number = creatorConfig.map.fieldSize;\n  const mapNetsStatus = storeData.map.net;\n  let positionDelta: IPoint = {\n    x: -1,\n    y: -1\n  }\n\n  if (!mapNetsStatus.field && !mapNetsStatus.square || selectType === 'none') return; //no nets, no select\n\n\n  switch(selectType) {\n    case \"field\":\n      positionDelta = {\n        x: Math.floor(cursorPosition.x / fieldSize),\n        y: Math.floor(cursorPosition.y / fieldSize)\n      };\n\n      selectCanvasField(selectMatrix, positionDelta);\n    break;\n    case \"square\":\n      positionDelta = {\n        x: Math.floor(cursorPosition.x / (fieldSize / 2)),\n        y: Math.floor(cursorPosition.y / (fieldSize / 2))\n      };\n\n      selectCanvasSquare(selectMatrix, positionDelta);\n    break;\n    case \"mouse\":\n      mouseSelectFields();\n    break;\n    default:\n      throw new Error('Invalid select map type.');\n  }\n\n  store.dispatch(changeMapSelectMatrix(selectMatrix));\n  colorChecked(positionDelta, selectType);\n}\n\n\nconst colorChecked = (positionDelta: IPoint, type: string) => {\n  const canvas: any = document.getElementById(\"mapSelectCanvas\");\n  const ctx: any = canvas.getContext(\"2d\");\n  let fieldSize: number = creatorConfig.map.fieldSize;\n\n  if (type === 'square') fieldSize = fieldSize / 2;\n  \n  const posX: number = positionDelta.x * fieldSize;\n  const posY: number = positionDelta.y * fieldSize;\n\n  ctx.fillStyle = creatorConfig.selectColor;\n  ctx.fillRect(posX, posY, fieldSize, fieldSize);\n  ctx.closePath();\n  ctx.stroke();\n}\n\n\nexport const selectCanvasSquare = (selectMatrix: Array<any>, squarePosition: IPoint): void => {\n  //squarePosition determines x and y axis of squares, eg. x: 2, y: 4 and it fill to field x: 1, y: 2\n  \n  const fieldPosition: IPoint = {\n    x: Math.floor(squarePosition.x / 2),\n    y: Math.floor(squarePosition.y / 2)\n  }\n\n  const squareDelta: IPoint = {\n    x: Math.floor(squarePosition.x % 2),\n    y: Math.floor(squarePosition.y % 2)\n  };\n\n  selectMatrix[fieldPosition.y][fieldPosition.x][squareDelta.y][squareDelta.x] = 1;\n}\n\n\nconst selectCanvasField = (selectMatrix: Array<any>, fieldPosition: IPoint): void => {\n  selectMatrix[fieldPosition.y][fieldPosition.x] = [\n    [1, 1],\n    [1, 1]\n  ]; //Select whole field\n}"]},"metadata":{},"sourceType":"module"}